//------------------------------------------------------------------------------
#pragma once
#include <iostream>
#include <vector>
class Helper {
public:
  static std::string toUpper(std::string);
  static std::string toLower(std::string);
  static void rPunctuationWordCorrector(std::string &);
  static std::string punctuationWordCorrector(std::string);
  /// @brief Method to correct the output view of to_string() func.
  /// @param number the float number
  /// @return string without extra valueless zeros
  template<typename T> static std::string correctView(T);
  static std::string correctNamePunctuation(const std::string &);
  static std::vector<std::string> split(const std::string &, const char &);
};
//------------------------------------------------------------------------------
std::string Helper::toUpper(std::string s) {
  for (int i = 0; i < s.size(); i++)
    s[i] = toupper(s[i]);
  return s;
}
//------------------------------------------------------------------------------
std::string Helper::toLower(std::string s) {
  for (int i = 0; i < s.size(); i++)
    s[i] = tolower(s[i]);
  return s;
}
//------------------------------------------------------------------------------
void Helper::rPunctuationWordCorrector(std::string &s) {
  char firstLetter = toupper(s[0]);
  s = firstLetter + toLower(s.substr(1, s.size() - 1));
}
//------------------------------------------------------------------------------
std::string Helper::punctuationWordCorrector(std::string s) {
  std::string newStr = "";
  char firstLetter = toupper(s[0]);
  newStr = firstLetter + toLower(s.substr(1, s.size() - 1));
  return newStr;
}
//------------------------------------------------------------------------------
template<typename T> std::string Helper::correctView(T number) {
  if ((typeid(number) != typeid(double)) && (typeid(number) != typeid(float))) return to_string(number);

  std::string strNumber, correct;
  correct = strNumber = to_string(number);
  int iSize = strNumber.size() - 1;
  //in case the output of to_string() did not output extra zeros
  if (strNumber[iSize] == 0) return strNumber;
  //else iterate and correct the view
  for (iSize; iSize >= 0; --iSize) {
    // if (correct[iSize] == '.') {
    //   return strNumber.substr(0, iSize);
    // }
    if (correct[iSize] > '0')
      return correct;
    if (correct[iSize] == '.') {
      return correct.substr(0, correct.size() - 1);
    }
    correct = strNumber.substr(0, iSize);
    //sets the correct string as the number from start to the end excluding the extra zeros generated by to_string() func.
  }
  return correct;
}
//------------------------------------------------------------------------------
std::vector<std::string> Helper::split(const std::string &str, const char &del) {
  std::vector<std::string> vec;
  std::string temp = "";
  for (int i = 0; i < str.size(); i++) {
    if (str[i] != del)
      temp += str[i];
    else {
      vec.push_back(temp);
      temp = "";
    }
  }
  vec.push_back(temp);
  return vec;
}
//------------------------------------------------------------------------------
std::string Helper::correctNamePunctuation(const std::string &name) {
  std::vector<std::string> fullName = split(name, ' ');
  std::string temp = "";
  for (std::string Name : fullName) {
    temp += toupper(Name[0]);
    for (char c : Name.substr(1, -1))
      temp += tolower(c);
    if (Name != fullName.back())
      temp += ' ';
  }
  return temp;
}
//------------------------------------------------------------------------------